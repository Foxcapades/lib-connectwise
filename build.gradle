plugins { id "com.jfrog.bintray" version "1.7.1" }

def config = [
  group: 'io.vulpine.lib',
  groupKey: 'Vulpine-IO',
  version: '0.0.9',
  name: 'connectwise',
  repo: 'lib-connectwise',
  jvm: '1.6'
];

group config.group
version config.version

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'

sourceCompatibility = config.jvm
targetCompatibility = config.jvm

jacoco {
  toolVersion = "0.7.6.201602180812"
  reportsDir = file("${buildDir}/reports/jacoco")
}

jacocoTestReport {
  reports {
    xml.enabled true
  }
}

/*
 * BinTray Configuration
 */
bintray {
  user = System.getenv('BINTRAY_USER')
  key = System.getenv('BINTRAY_KEY')
  publications = [ 'maven' ]
  pkg {
    repo = 'maven'
    name = config.name
    userOrg = 'vpx'
    licenses = [ 'Apache-2.0' ]
    vcsUrl = "https://github.com/${config.groupKey}/${config.name}"
    version {
      name = config.version
      released = new Date()
      vcsTag = config.version
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '3.0'
  distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

repositories {
  mavenCentral()
  maven { url "http://dl.bintray.com/vpx/maven" }
}

configurations {
  runtime.exclude group: 'org.slf4j'
}

dependencies {

  compile(
    [ group: 'io.vulpine.lib',                   name: 'http',                   version: '0.2.2' ],
    [ group: 'io.vulpine.lib',                   name: 'logging',                version: '0.1.2' ],
    [ group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: '2.8.1' ],
    [ group: 'org.codehaus.woodstox',            name: 'woodstox-core-asl',      version: '4.4.1' ],
  )

  testCompile(
    [ group: 'junit',           name: 'junit',                           version: '4.12'         ],
    [ group: 'de.bechte.junit', name: 'junit-hierarchicalcontextrunner', version: '4.12.1'       ],
    [ group: 'org.mockito',     name: 'mockito-core',                    version: '2.0.111-beta' ]
  )

}

class Wrap {
  Node wrapped;
  Wrap parent;

  Wrap( Node node ) {
    wrapped = node;
  }

  Wrap( Node node, Wrap parent ) {
    this.wrapped = node;
    this.parent = parent;
  }

  Wrap contained( node, Map children ) {
    Node c = wrapped.appendNode(node);
    children.forEach({ tag, content -> c.appendNode(tag, content) });
    return new Wrap(c, this)
  };

  Wrap nested( newNode, ... childNodes ) {
    Node appended = wrapped.appendNode(newNode);
    for (def child : childNodes) appended.append(child);
    return new Wrap(appended, this)
  };

  Wrap append( name, value ) {
    def n = wrapped.appendNode(name, value);
    return new Wrap(n, this)
  };

  Wrap up() { return parent }
}

publishing {
  repositories { maven { url "https://api.bintray.com/maven/vpx/maven/${config.name}/;publish=1" } }
  publications {
    maven(MavenPublication) {
      from components.java;
      pom.withXml {
        { Node project ->
          def ghu = "https://github.com/${config.groupKey}/${config.repo}";
          new Wrap(project)
            .append('inceptionYear', '2016').up()
            .contained('organization', [ name: 'Vulpine IO', url: 'http://vulpine.io' ]).up()
            .nested('developers')
            .contained(
            'developer',
            [ id: 'elliefops', name: 'Elizabeth Harper', email: 'elliefops@gmail.com' ]
          ).up().up()
            .contained('issueManagement', [
            system: 'YouTrack',
            url: "${ghu}/issues"
          ]
          )
            .up()
            .contained('ciManagement', [ system: 'Travis CI', url: "https://travis-ci.org/${config.groupKey}" ]).up()
            .contained('scm', [
            connection: "scm:git:${ghu}.git",
            developerConnection: "scm:git:${ghu}.git",
            tag: 'master',
            url: ghu
          ]
          ).up()
            .nested('licenses')
            .contained('license', [
            name: 'Apache License, Version 2.0',
            url: 'http://www.apache.org/licenses/LICENSE-2.0.txt',
            distribution: 'repo'
          ]
          );
          return project;
        }.call((Node) asNode())
      }
    }
  }
}
